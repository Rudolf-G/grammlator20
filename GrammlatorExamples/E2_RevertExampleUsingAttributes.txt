using System;
using System.Collections.Generic;
using System.Diagnostics;

using GrammlatorRuntime;

namespace GrammlatorExamples {
   class RevertExampleUsingAttributes {
      enum AorBorEnd { a, b, End, Other }

      public Boolean AnalyzeInput()
      {
         Console.WriteLine("Please input a sequence of 'a's and 'b's:");
         String Line = Console.ReadLine();
         int i = 0;

         // Local methods
         AorBorEnd PeekSymbol() =>
            (i >= Line.Length) ? AorBorEnd.End
            : Line[i] >= 'a' && Line[i] <= 'b' ? (AorBorEnd)(Line[i] - 'a')
            : AorBorEnd.Other;
         
         void MyError() // called from the generated code (see ErrorHaltInstruction)
         {
            if (i < Line.Length)
               Console.WriteLine
                  (" The remainder of the line doesn't conform to the grammar:" +
                   $" \"{Line.Substring(i)}\"");
            Console.WriteLine();
         }

         void Success() // explicitly called from own code after the generated code
            => Console.WriteLine(" This is the input in reversed order.");

         var StateStack = new Stack<Int32>(50);
         var AttrStack = new StackOfMultiTypeElements(50);

         #region grammar
         //| TerminalSymbolEnum: "AorBorEnd"; 
         //| SymbolNameOrFunctionCall: "PeekSymbol()"; SymbolAcceptInstruction: "i++;";
         //| ErrorHaltInstruction: "MyError(); return false;";
         //| StateStack: "StateStack";
         //| AttributeStack: "AttrStack";
         //|
         //|  a | b | End | Other;
         //|
         //| *= Sequence_of_a_and_b, End;       
         //| 
         //| Sequence_of_a_and_b=
         //|     /* empty definition (must be the 1st definition)*/
         static void EndOfSequence() => Console.WriteLine(" This input conforms to the grammar.");

         //|   | AorB(char ch), Sequence_of_a_and_b
         static void DisplayAorB(char ch) 
            => Console.Write(ch); // reverse order

         //| AorB(char x)=
         //|   a
         static void DisplayAndAssignA(out char x)
         {
            x = 'a';
            Console.Write('a'); // input order
         }

         //|   | b
         static void DisplayAndAssignB(out char x)
         {
            x = 'b';
            Console.Write('b'); // input order
         }
         #endregion grammar

#region grammlator generated

#endregion grammlator generated

         Success();
         return true;
      }
   }
}
